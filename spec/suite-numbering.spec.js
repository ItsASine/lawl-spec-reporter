// Generated by CoffeeScript 1.9.2
(function() {
  var SpecReporter;

  require('./helpers/test-helper.coffee');

  SpecReporter = require('../src/jasmine-spec-reporter.js');

  describe('spec reporter', function() {
    addMatchers();
    return describe('with suite number enabled', function() {
      beforeEach(function() {
        return this.reporter = new SpecReporter({
          displaySuiteNumber: true
        });
      });
      describe('when single suite', function() {
        return it('should add suite number', function() {
          return expect(new Test(this.reporter, function() {
            return this.describe('suite', function() {
              return this.it('successful spec', function() {
                return this.passed();
              });
            });
          }).outputs).contains(/1 suite/);
        });
      });
      describe('when multiple suite', function() {
        return it('should add suite number', function() {
          var outputs;
          outputs = new Test(this.reporter, function() {
            this.describe('first suite', function() {
              return this.it('successful spec', function() {
                return this.passed();
              });
            });
            this.describe('second suite', function() {
              return this.it('successful spec', function() {
                return this.passed();
              });
            });
            return this.describe('third suite', function() {
              return this.it('successful spec', function() {
                return this.passed();
              });
            });
          }).outputs;
          expect(outputs).contains(/1 first suite/);
          expect(outputs).contains(/2 second suite/);
          return expect(outputs).contains(/3 third suite/);
        });
      });
      return describe('when multiple nested suite', function() {
        return it('should add suite number', function() {
          var outputs;
          outputs = new Test(this.reporter, function() {
            return this.describe('first suite', function() {
              this.describe('first child suite', function() {
                this.describe('first grandchild suite', function() {
                  return this.it('successful spec', function() {
                    return this.passed();
                  });
                });
                return this.describe('second grandchild suite', function() {
                  return this.it('successful spec', function() {
                    return this.passed();
                  });
                });
              });
              return this.describe('second child suite', function() {
                return this.it('successful spec', function() {
                  return this.passed();
                });
              });
            });
          }).outputs;
          expect(outputs).contains(/1 first suite/);
          expect(outputs).contains(/1.1 first child suite/);
          expect(outputs).contains(/1.1.1 first grandchild suite/);
          expect(outputs).contains(/1.1.2 second grandchild suite/);
          return expect(outputs).contains(/1.2 second child suite/);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=suite-numbering.spec.js.map
